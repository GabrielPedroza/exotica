// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         BlockPost[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Defining each user post
model BlockPost {
  id String @id @default(cuid())

  author   User   @relation(fields: [authorID], references: [id])
  authorID String

  text       String
  leftBlock  String  @db.LongText
  rightBlock String? @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  votes     Vote[]

  @@index([authorID])
}

// model Comment {
//   id       String @id @default(cuid())
//   reponse  String
//   author   User   @relation(fields: [authorID], references: [id])
//   authorID String
//   voteState Int    @default(0)
//   upvote   Vote[]
//   BlockPost BlockPost @relation(fields: [postID], references: [id])
//   postID   String

//   @@index([authorID])
//   @@index([postID])
// }

model Vote {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userID], references: [id])
  postVoted  BlockPost @relation(fields: [postID], references: [id])
  postID     String
  userID     String
  typeOfVote String

  @@unique([userID, postID])
  @@index([userID])
  @@index([postID])
}
