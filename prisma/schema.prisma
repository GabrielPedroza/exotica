generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         BlockPost[]
  postVotes     PostVote[]
  comments      Comment[]
  commentVotes  CommentVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlockPost {
  id String @id @default(cuid())

  author   User   @relation(fields: [authorID], references: [id])
  authorID String

  text       String
  leftBlock  String  @db.LongText
  rightBlock String? @db.LongText

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
  postVotes PostVote[]
  comments  Comment[]

  @@index([authorID])
}

model Comment {
  id           String        @id @default(cuid())
  response     String
  user         User          @relation(fields: [userID], references: [id])
  userID       String
  votes        PostVote[]
  post         BlockPost     @relation(fields: [postID], references: [id])
  postID       String
  commentVotes CommentVote[]

  @@index([userID])
  @@index([postID])
}

model PostVote {
  id         String     @id @default(cuid())
  typeOfVote String
  user       User       @relation(fields: [userID], references: [id])
  userID     String
  postVoted  BlockPost? @relation(fields: [postID], references: [id])
  postID     String
  comment    Comment?   @relation(fields: [commentID], references: [id])
  commentID  String?

  @@unique([userID, postID])
  @@index([userID])
  @@index([postID])
  @@index([commentID])
}

model CommentVote {
  id           String   @id @default(cuid())
  typeOfVote   String
  user         User     @relation(fields: [userID], references: [id])
  userID       String
  commentVoted Comment? @relation(fields: [commentID], references: [id])
  commentID    String

  @@unique([userID, commentID])
  @@index([userID])
  @@index([commentID])
}
